=begin
#FastAPI

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module SwaggerStableDiffusionWebui
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :serialize  (default to true)
    # @return [Object]
    def api_info_info_get(opts = {})
      data, _status_code, _headers = api_info_info_get_with_http_info(opts)
      data
    end

    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :serialize  (default to true)
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def api_info_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_info_info_get ...'
      end
      # resource path
      local_var_path = '/info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialize'] = opts[:'serialize'] if !opts[:'serialize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_info_info_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_info_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :serialize  (default to true)
    # @return [Object]
    def api_info_info_get_0(opts = {})
      data, _status_code, _headers = api_info_info_get_0_with_http_info(opts)
      data
    end

    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :serialize  (default to true)
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def api_info_info_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_info_info_get_0 ...'
      end
      # resource path
      local_var_path = '/info/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialize'] = opts[:'serialize'] if !opts[:'serialize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.api_info_info_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_info_info_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def app_id_app_id_get(opts = {})
      data, _status_code, _headers = app_id_app_id_get_with_http_info(opts)
      data
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def app_id_app_id_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app_id_app_id_get ...'
      end
      # resource path
      local_var_path = '/app_id/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.app_id_app_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app_id_app_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def app_id_app_id_get_0(opts = {})
      data, _status_code, _headers = app_id_app_id_get_0_with_http_info(opts)
      data
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def app_id_app_id_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app_id_app_id_get_0 ...'
      end
      # resource path
      local_var_path = '/app_id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.app_id_app_id_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app_id_app_id_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Build Resource
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def build_resource_assets_path_get(path, opts = {})
      data, _status_code, _headers = build_resource_assets_path_get_with_http_info(path, opts)
      data
    end

    # Build Resource
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def build_resource_assets_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.build_resource_assets_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.build_resource_assets_path_get"
      end
      # resource path
      local_var_path = '/assets/{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.build_resource_assets_path_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#build_resource_assets_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect
    # @param [Hash] opts the optional parameters
    # @option opts [BodyDetectControlnetDetectPost] :body_detect_controlnet_detect_post 
    # @return [Object]
    def detect_controlnet_detect_post(opts = {})
      data, _status_code, _headers = detect_controlnet_detect_post_with_http_info(opts)
      data
    end

    # Detect
    # @param [Hash] opts the optional parameters
    # @option opts [BodyDetectControlnetDetectPost] :body_detect_controlnet_detect_post 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def detect_controlnet_detect_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.detect_controlnet_detect_post ...'
      end
      # resource path
      local_var_path = '/controlnet/detect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body_detect_controlnet_detect_post'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.detect_controlnet_detect_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#detect_controlnet_detect_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Sysinfo
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :attachment 
    # @return [Object]
    def download_sysinfo_internal_sysinfo_get(opts = {})
      data, _status_code, _headers = download_sysinfo_internal_sysinfo_get_with_http_info(opts)
      data
    end

    # Download Sysinfo
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :attachment 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def download_sysinfo_internal_sysinfo_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.download_sysinfo_internal_sysinfo_get ...'
      end
      # resource path
      local_var_path = '/internal/sysinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attachment'] = opts[:'attachment'] if !opts[:'attachment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.download_sysinfo_internal_sysinfo_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#download_sysinfo_internal_sysinfo_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Favicon
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def favicon_favicon_ico_get(opts = {})
      data, _status_code, _headers = favicon_favicon_ico_get_with_http_info(opts)
      data
    end

    # Favicon
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def favicon_favicon_ico_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.favicon_favicon_ico_get ...'
      end
      # resource path
      local_var_path = '/favicon.ico'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.favicon_favicon_ico_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#favicon_favicon_ico_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename  (default to '')
    # @return [Object]
    def fetch_file_sd_extra_networks_thumb_get(opts = {})
      data, _status_code, _headers = fetch_file_sd_extra_networks_thumb_get_with_http_info(opts)
      data
    end

    # Fetch File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename  (default to '')
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def fetch_file_sd_extra_networks_thumb_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fetch_file_sd_extra_networks_thumb_get ...'
      end
      # resource path
      local_var_path = '/sd_extra_networks/thumb'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.fetch_file_sd_extra_networks_thumb_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fetch_file_sd_extra_networks_thumb_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # File Deprecated
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def file_deprecated_file_path_get(path, opts = {})
      data, _status_code, _headers = file_deprecated_file_path_get_with_http_info(path, opts)
      data
    end

    # File Deprecated
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def file_deprecated_file_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_deprecated_file_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.file_deprecated_file_path_get"
      end
      # resource path
      local_var_path = '/file/{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.file_deprecated_file_path_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_deprecated_file_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # File
    # @param path_or_url [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def file_file_path_or_url_get(path_or_url, opts = {})
      data, _status_code, _headers = file_file_path_or_url_get_with_http_info(path_or_url, opts)
      data
    end

    # File
    # @param path_or_url [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def file_file_path_or_url_get_with_http_info(path_or_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_file_path_or_url_get ...'
      end
      # verify the required parameter 'path_or_url' is set
      if @api_client.config.client_side_validation && path_or_url.nil?
        fail ArgumentError, "Missing the required parameter 'path_or_url' when calling DefaultApi.file_file_path_or_url_get"
      end
      # resource path
      local_var_path = '/file={path_or_url}'.sub('{' + 'path_or_url' + '}', CGI.escape(path_or_url.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.file_file_path_or_url_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_file_path_or_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # File
    # @param path_or_url [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def file_file_path_or_url_head(path_or_url, opts = {})
      data, _status_code, _headers = file_file_path_or_url_head_with_http_info(path_or_url, opts)
      data
    end

    # File
    # @param path_or_url [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def file_file_path_or_url_head_with_http_info(path_or_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_file_path_or_url_head ...'
      end
      # verify the required parameter 'path_or_url' is set
      if @api_client.config.client_side_validation && path_or_url.nil?
        fail ArgumentError, "Missing the required parameter 'path_or_url' when calling DefaultApi.file_file_path_or_url_head"
      end
      # resource path
      local_var_path = '/file={path_or_url}'.sub('{' + 'path_or_url' + '}', CGI.escape(path_or_url.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.file_file_path_or_url_head",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_file_path_or_url_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_config_config_get(opts = {})
      data, _status_code, _headers = get_config_config_get_with_http_info(opts)
      data
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_config_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_config_config_get ...'
      end
      # resource path
      local_var_path = '/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_config_config_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_config_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_config_config_get_0(opts = {})
      data, _status_code, _headers = get_config_config_get_0_with_http_info(opts)
      data
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_config_config_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_config_config_get_0 ...'
      end
      # resource path
      local_var_path = '/config/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_config_config_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_config_config_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_current_user_user_get(opts = {})
      data, _status_code, _headers = get_current_user_user_get_with_http_info(opts)
      data
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_current_user_user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_user_user_get ...'
      end
      # resource path
      local_var_path = '/user/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_current_user_user_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_user_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_current_user_user_get_0(opts = {})
      data, _status_code, _headers = get_current_user_user_get_0_with_http_info(opts)
      data
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_current_user_user_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_user_user_get_0 ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_current_user_user_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_user_user_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Loras
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_loras_sdapi_v1_loras_get(opts = {})
      data, _status_code, _headers = get_loras_sdapi_v1_loras_get_with_http_info(opts)
      data
    end

    # Get Loras
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_loras_sdapi_v1_loras_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_loras_sdapi_v1_loras_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/loras'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_loras_sdapi_v1_loras_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_loras_sdapi_v1_loras_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page  (default to '')
    # @option opts [String] :item  (default to '')
    # @return [Object]
    def get_metadata_sd_extra_networks_metadata_get(opts = {})
      data, _status_code, _headers = get_metadata_sd_extra_networks_metadata_get_with_http_info(opts)
      data
    end

    # Get Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page  (default to '')
    # @option opts [String] :item  (default to '')
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_metadata_sd_extra_networks_metadata_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_metadata_sd_extra_networks_metadata_get ...'
      end
      # resource path
      local_var_path = '/sd_extra_networks/metadata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'item'] = opts[:'item'] if !opts[:'item'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_metadata_sd_extra_networks_metadata_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_metadata_sd_extra_networks_metadata_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Queue Status
    # @param [Hash] opts the optional parameters
    # @return [Estimation]
    def get_queue_status_queue_status_get(opts = {})
      data, _status_code, _headers = get_queue_status_queue_status_get_with_http_info(opts)
      data
    end

    # Get Queue Status
    # @param [Hash] opts the optional parameters
    # @return [Array<(Estimation, Integer, Hash)>] Estimation data, response status code and response headers
    def get_queue_status_queue_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_queue_status_queue_status_get ...'
      end
      # resource path
      local_var_path = '/queue/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Estimation'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_queue_status_queue_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_queue_status_queue_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_token_token_get(opts = {})
      data, _status_code, _headers = get_token_token_get_with_http_info(opts)
      data
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_token_token_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_token_token_get ...'
      end
      # resource path
      local_var_path = '/token/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_token_token_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_token_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_token_token_get_0(opts = {})
      data, _status_code, _headers = get_token_token_get_0_with_http_info(opts)
      data
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_token_token_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_token_token_get_0 ...'
      end
      # resource path
      local_var_path = '/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_token_token_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_token_token_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def lambda_internal_ping_get(opts = {})
      data, _status_code, _headers = lambda_internal_ping_get_with_http_info(opts)
      data
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def lambda_internal_ping_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_ping_get ...'
      end
      # resource path
      local_var_path = '/internal/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.lambda_internal_ping_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_ping_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def lambda_internal_profile_startup_get(opts = {})
      data, _status_code, _headers = lambda_internal_profile_startup_get_with_http_info(opts)
      data
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def lambda_internal_profile_startup_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_profile_startup_get ...'
      end
      # resource path
      local_var_path = '/internal/profile-startup'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.lambda_internal_profile_startup_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_profile_startup_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def lambda_internal_sysinfo_download_get(opts = {})
      data, _status_code, _headers = lambda_internal_sysinfo_download_get_with_http_info(opts)
      data
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def lambda_internal_sysinfo_download_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_sysinfo_download_get ...'
      end
      # resource path
      local_var_path = '/internal/sysinfo-download'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.lambda_internal_sysinfo_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_sysinfo_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def login_check_login_check_get(opts = {})
      data, _status_code, _headers = login_check_login_check_get_with_http_info(opts)
      data
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def login_check_login_check_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_check_login_check_get ...'
      end
      # resource path
      local_var_path = '/login_check/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.login_check_login_check_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_check_login_check_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def login_check_login_check_get_0(opts = {})
      data, _status_code, _headers = login_check_login_check_get_0_with_http_info(opts)
      data
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def login_check_login_check_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_check_login_check_get_0 ...'
      end
      # resource path
      local_var_path = '/login_check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.login_check_login_check_get_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_check_login_check_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param username [String] 
    # @param password [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type 
    # @option opts [String] :scope  (default to '')
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @return [Object]
    def login_login_post(username, password, opts = {})
      data, _status_code, _headers = login_login_post_with_http_info(username, password, opts)
      data
    end

    # Login
    # @param username [String] 
    # @param password [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type 
    # @option opts [String] :scope  (default to '')
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def login_login_post_with_http_info(username, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_login_post ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login_login_post"
      end
      pattern = Regexp.new(/password/)
      if @api_client.config.client_side_validation && !opts[:'grant_type'].nil? && opts[:'grant_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"grant_type\"]' when calling DefaultApi.login_login_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/login/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['username'] = username
      form_params['password'] = password
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.login_login_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Login
    # @param username [String] 
    # @param password [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type 
    # @option opts [String] :scope  (default to '')
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @return [Object]
    def login_login_post_0(username, password, opts = {})
      data, _status_code, _headers = login_login_post_0_with_http_info(username, password, opts)
      data
    end

    # Login
    # @param username [String] 
    # @param password [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type 
    # @option opts [String] :scope  (default to '')
    # @option opts [String] :client_id 
    # @option opts [String] :client_secret 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def login_login_post_0_with_http_info(username, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_login_post_0 ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login_login_post_0"
      end
      pattern = Regexp.new(/password/)
      if @api_client.config.client_side_validation && !opts[:'grant_type'].nil? && opts[:'grant_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"grant_type\"]' when calling DefaultApi.login_login_post_0, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['username'] = username
      form_params['password'] = password
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.login_login_post_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_login_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [String]
    def main_get(opts = {})
      data, _status_code, _headers = main_get_with_http_info(opts)
      data
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def main_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.main_get ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.main_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#main_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [String]
    def main_head(opts = {})
      data, _status_code, _headers = main_head_with_http_info(opts)
      data
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def main_head_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.main_head ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.main_head",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#main_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Model List
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def model_list_controlnet_model_list_get(opts = {})
      data, _status_code, _headers = model_list_controlnet_model_list_get_with_http_info(opts)
      data
    end

    # Model List
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def model_list_controlnet_model_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.model_list_controlnet_model_list_get ...'
      end
      # resource path
      local_var_path = '/controlnet/model_list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.model_list_controlnet_model_list_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#model_list_controlnet_model_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Module List
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :alias_names  (default to false)
    # @return [Object]
    def module_list_controlnet_module_list_get(opts = {})
      data, _status_code, _headers = module_list_controlnet_module_list_get_with_http_info(opts)
      data
    end

    # Module List
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :alias_names  (default to false)
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def module_list_controlnet_module_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.module_list_controlnet_module_list_get ...'
      end
      # resource path
      local_var_path = '/controlnet/module_list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'alias_names'] = opts[:'alias_names'] if !opts[:'alias_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.module_list_controlnet_module_list_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#module_list_controlnet_module_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def predict_api_api_name_post(api_name, predict_body, opts = {})
      data, _status_code, _headers = predict_api_api_name_post_with_http_info(api_name, predict_body, opts)
      data
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def predict_api_api_name_post_with_http_info(api_name, predict_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_api_api_name_post ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_api_api_name_post"
      end
      # verify the required parameter 'predict_body' is set
      if @api_client.config.client_side_validation && predict_body.nil?
        fail ArgumentError, "Missing the required parameter 'predict_body' when calling DefaultApi.predict_api_api_name_post"
      end
      # resource path
      local_var_path = '/api/{api_name}/'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(predict_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.predict_api_api_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_api_api_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def predict_api_api_name_post_0(api_name, predict_body, opts = {})
      data, _status_code, _headers = predict_api_api_name_post_0_with_http_info(api_name, predict_body, opts)
      data
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def predict_api_api_name_post_0_with_http_info(api_name, predict_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_api_api_name_post_0 ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_api_api_name_post_0"
      end
      # verify the required parameter 'predict_body' is set
      if @api_client.config.client_side_validation && predict_body.nil?
        fail ArgumentError, "Missing the required parameter 'predict_body' when calling DefaultApi.predict_api_api_name_post_0"
      end
      # resource path
      local_var_path = '/api/{api_name}'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(predict_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.predict_api_api_name_post_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_api_api_name_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def predict_run_api_name_post(api_name, predict_body, opts = {})
      data, _status_code, _headers = predict_run_api_name_post_with_http_info(api_name, predict_body, opts)
      data
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def predict_run_api_name_post_with_http_info(api_name, predict_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_run_api_name_post ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_run_api_name_post"
      end
      # verify the required parameter 'predict_body' is set
      if @api_client.config.client_side_validation && predict_body.nil?
        fail ArgumentError, "Missing the required parameter 'predict_body' when calling DefaultApi.predict_run_api_name_post"
      end
      # resource path
      local_var_path = '/run/{api_name}/'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(predict_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.predict_run_api_name_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_run_api_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def predict_run_api_name_post_0(api_name, predict_body, opts = {})
      data, _status_code, _headers = predict_run_api_name_post_0_with_http_info(api_name, predict_body, opts)
      data
    end

    # Predict
    # @param api_name [String] 
    # @param predict_body [PredictBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def predict_run_api_name_post_0_with_http_info(api_name, predict_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_run_api_name_post_0 ...'
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_run_api_name_post_0"
      end
      # verify the required parameter 'predict_body' is set
      if @api_client.config.client_side_validation && predict_body.nil?
        fail ArgumentError, "Missing the required parameter 'predict_body' when calling DefaultApi.predict_run_api_name_post_0"
      end
      # resource path
      local_var_path = '/run/{api_name}'.sub('{' + 'api_name' + '}', CGI.escape(api_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(predict_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.predict_run_api_name_post_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_run_api_name_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Progressapi
    # @param progress_request [ProgressRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProgressResponse]
    def progressapi_internal_progress_post(progress_request, opts = {})
      data, _status_code, _headers = progressapi_internal_progress_post_with_http_info(progress_request, opts)
      data
    end

    # Progressapi
    # @param progress_request [ProgressRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProgressResponse, Integer, Hash)>] ProgressResponse data, response status code and response headers
    def progressapi_internal_progress_post_with_http_info(progress_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.progressapi_internal_progress_post ...'
      end
      # verify the required parameter 'progress_request' is set
      if @api_client.config.client_side_validation && progress_request.nil?
        fail ArgumentError, "Missing the required parameter 'progress_request' when calling DefaultApi.progressapi_internal_progress_post"
      end
      # resource path
      local_var_path = '/internal/progress'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(progress_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProgressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.progressapi_internal_progress_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#progressapi_internal_progress_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Quicksettings Hint
    # @param [Hash] opts the optional parameters
    # @return [Array<QuicksettingsHint>]
    def quicksettings_hint_internal_quicksettings_hint_get(opts = {})
      data, _status_code, _headers = quicksettings_hint_internal_quicksettings_hint_get_with_http_info(opts)
      data
    end

    # Quicksettings Hint
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuicksettingsHint>, Integer, Hash)>] Array<QuicksettingsHint> data, response status code and response headers
    def quicksettings_hint_internal_quicksettings_hint_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quicksettings_hint_internal_quicksettings_hint_get ...'
      end
      # resource path
      local_var_path = '/internal/quicksettings-hint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<QuicksettingsHint>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.quicksettings_hint_internal_quicksettings_hint_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quicksettings_hint_internal_quicksettings_hint_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Loras
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def refresh_loras_sdapi_v1_refresh_loras_post(opts = {})
      data, _status_code, _headers = refresh_loras_sdapi_v1_refresh_loras_post_with_http_info(opts)
      data
    end

    # Refresh Loras
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def refresh_loras_sdapi_v1_refresh_loras_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.refresh_loras_sdapi_v1_refresh_loras_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/refresh-loras'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.refresh_loras_sdapi_v1_refresh_loras_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#refresh_loras_sdapi_v1_refresh_loras_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Iterator
    # @param reset_body [ResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reset_iterator_reset_post(reset_body, opts = {})
      data, _status_code, _headers = reset_iterator_reset_post_with_http_info(reset_body, opts)
      data
    end

    # Reset Iterator
    # @param reset_body [ResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reset_iterator_reset_post_with_http_info(reset_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reset_iterator_reset_post ...'
      end
      # verify the required parameter 'reset_body' is set
      if @api_client.config.client_side_validation && reset_body.nil?
        fail ArgumentError, "Missing the required parameter 'reset_body' when calling DefaultApi.reset_iterator_reset_post"
      end
      # resource path
      local_var_path = '/reset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reset_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reset_iterator_reset_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reset_iterator_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Iterator
    # @param reset_body [ResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reset_iterator_reset_post_0(reset_body, opts = {})
      data, _status_code, _headers = reset_iterator_reset_post_0_with_http_info(reset_body, opts)
      data
    end

    # Reset Iterator
    # @param reset_body [ResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reset_iterator_reset_post_0_with_http_info(reset_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reset_iterator_reset_post_0 ...'
      end
      # verify the required parameter 'reset_body' is set
      if @api_client.config.client_side_validation && reset_body.nil?
        fail ArgumentError, "Missing the required parameter 'reset_body' when calling DefaultApi.reset_iterator_reset_post_0"
      end
      # resource path
      local_var_path = '/reset/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reset_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reset_iterator_reset_post_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reset_iterator_reset_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse Proxy
    # @param url_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reverse_proxy_proxy_url_path_get(url_path, opts = {})
      data, _status_code, _headers = reverse_proxy_proxy_url_path_get_with_http_info(url_path, opts)
      data
    end

    # Reverse Proxy
    # @param url_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reverse_proxy_proxy_url_path_get_with_http_info(url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reverse_proxy_proxy_url_path_get ...'
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling DefaultApi.reverse_proxy_proxy_url_path_get"
      end
      # resource path
      local_var_path = '/proxy={url_path}'.sub('{' + 'url_path' + '}', CGI.escape(url_path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reverse_proxy_proxy_url_path_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reverse_proxy_proxy_url_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse Proxy
    # @param url_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reverse_proxy_proxy_url_path_head(url_path, opts = {})
      data, _status_code, _headers = reverse_proxy_proxy_url_path_head_with_http_info(url_path, opts)
      data
    end

    # Reverse Proxy
    # @param url_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reverse_proxy_proxy_url_path_head_with_http_info(url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reverse_proxy_proxy_url_path_head ...'
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling DefaultApi.reverse_proxy_proxy_url_path_head"
      end
      # resource path
      local_var_path = '/proxy={url_path}'.sub('{' + 'url_path' + '}', CGI.escape(url_path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.reverse_proxy_proxy_url_path_head",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reverse_proxy_proxy_url_path_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Robots Txt
    # @param [Hash] opts the optional parameters
    # @return [String]
    def robots_txt_robots_txt_get(opts = {})
      data, _status_code, _headers = robots_txt_robots_txt_get_with_http_info(opts)
      data
    end

    # Robots Txt
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def robots_txt_robots_txt_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.robots_txt_robots_txt_get ...'
      end
      # resource path
      local_var_path = '/robots.txt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.robots_txt_robots_txt_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#robots_txt_robots_txt_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Settings
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def settings_controlnet_settings_get(opts = {})
      data, _status_code, _headers = settings_controlnet_settings_get_with_http_info(opts)
      data
    end

    # Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def settings_controlnet_settings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.settings_controlnet_settings_get ...'
      end
      # resource path
      local_var_path = '/controlnet/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.settings_controlnet_settings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#settings_controlnet_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Startup Events
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def startup_events_startup_events_get(opts = {})
      data, _status_code, _headers = startup_events_startup_events_get_with_http_info(opts)
      data
    end

    # Startup Events
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def startup_events_startup_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.startup_events_startup_events_get ...'
      end
      # resource path
      local_var_path = '/startup-events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.startup_events_startup_events_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#startup_events_startup_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Static Resource
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def static_resource_static_path_get(path, opts = {})
      data, _status_code, _headers = static_resource_static_path_get_with_http_info(path, opts)
      data
    end

    # Static Resource
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def static_resource_static_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.static_resource_static_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.static_resource_static_path_get"
      end
      # resource path
      local_var_path = '/static/{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.static_resource_static_path_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#static_resource_static_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Theme Css
    # @param [Hash] opts the optional parameters
    # @return [String]
    def theme_css_theme_css_get(opts = {})
      data, _status_code, _headers = theme_css_theme_css_get_with_http_info(opts)
      data
    end

    # Theme Css
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def theme_css_theme_css_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.theme_css_theme_css_get ...'
      end
      # resource path
      local_var_path = '/theme.css'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.theme_css_theme_css_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#theme_css_theme_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload File
    # @param files [Array<File>] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def upload_file_upload_post(files, opts = {})
      data, _status_code, _headers = upload_file_upload_post_with_http_info(files, opts)
      data
    end

    # Upload File
    # @param files [Array<File>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def upload_file_upload_post_with_http_info(files, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_file_upload_post ...'
      end
      # verify the required parameter 'files' is set
      if @api_client.config.client_side_validation && files.nil?
        fail ArgumentError, "Missing the required parameter 'files' when calling DefaultApi.upload_file_upload_post"
      end
      # resource path
      local_var_path = '/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['files'] = @api_client.build_collection_param(files, :csv)

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.upload_file_upload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_file_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Version
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def version_controlnet_version_get(opts = {})
      data, _status_code, _headers = version_controlnet_version_get_with_http_info(opts)
      data
    end

    # Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def version_controlnet_version_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.version_controlnet_version_get ...'
      end
      # resource path
      local_var_path = '/controlnet/version'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.version_controlnet_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#version_controlnet_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
